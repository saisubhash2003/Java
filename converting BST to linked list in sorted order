import java.util.*;
//converting BST to linked list in sorted order
class Lnode {
    int data;
    Lnode next;
    Lnode right;
    Lnode left;

    Lnode(int data) {
        this.data = data;
        this.next = null;
        this.right=null;
        this.left=null;
    }
}

class Main {
    public void print(int k1,int k2){
        root=print(root,k1,k2);
    }
    private Lnode print(Lnode root,int k1,int k2){
        if(root==null){
            return null;
        }
        if(root.data>k1) {
            print(root.left, k1, k2);
        }
        if(root.data>=k1&&root.data<=k2){
            System.out.print(root.data+" ");
        }
        if(root.data<k2){
            print(root.right,k1,k2);
        }
        return root;
    }
    static boolean checkbst(Lnode root,int min,int max){
        if(root==null){
            return true;
        }
        if(root.data<=min&&root.data>=max)
            return false;
        return checkbst(root.left,min,root.data)&&checkbst(root.right,root.data,max);
    }
    public static Lnode insertatend(Lnode head, int data) {
        Lnode newnode = new Lnode(data);
        if (head == null) {
            head = newnode;
        } else {
            Lnode temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newnode;
        }
        return head;
    }

    public static Lnode inorder(Lnode head, Lnode root) {
        if (root == null) return head;
        head = inorder(head, root.left);
        head = insertatend(head, root.data);
        head = inorder(head, root.right);
        return head;
    }

    public static void display(Lnode head) {
        Lnode temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        System.out.println("Name : Vasamsetti Sai Subhash\nRollno : 21BF1A3759");
        Lnode root = new Lnode(4);
        root.left = new Lnode(2);
        root.right = new Lnode(6);
        root.left.left = new Lnode(1);
        root.left.right = new Lnode(3);
        root.right.left = new Lnode(5);
        root.right.right = new Lnode(7);

        Lnode head = null;
        head = inorder(head, root);
        display(head);
        int min=Integer.MIN_VALUE;
        int max=Integer.MAX_VALUE;
        System.out.print(checkbst(root,min,max));
    }
}
