//TREES
import java.util.*;
class Node{
    int data;
    Node left;
    Node right;
    Node(int data){
        this.data=data;
        this.left=null;
        this.right=null;
    }
}
public class Main {
    public static void leveloreder(Node root){
        //levelordertraversal
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        while(!q.isEmpty()){
            Node temp=q.poll();
            System.out.print(temp.data+" ");
            if(temp.left!=null){
                q.add(temp.left);
            }
            if(temp.right!=null){
                q.add(temp.right);
            }
        }
    }
    static int sumofleafnodes(Node root){
        if(root==null){
            return 0;
        }
        if(root.left==null&&root.right==null){
            return root.data;
        }
        else{
            return sumofleafnodes(root.left)+sumofleafnodes(root.right);
        }
    }
    static int height(Node root){
        //height of the tree
        if(root==null){
            return 0;
        }
        else{
            int lh=height(root.left);
            int rh=height(root.right);
            return Math.max(lh,rh)+1;
        }
    }
    public static void main(String[] args) {
        System.out.println("Name:Vasamsetti Sai Subhash\nRollno:21BF1A3759");
        Scanner sc=new Scanner(System.in);
        Queue<Node> q=new LinkedList<>();
        Node head=new Node(sc.nextInt());
        q.add(head);
        int val;
        int count=0;
        while(!q.isEmpty()&&count!=3){
            Node temp=q.poll();
            val=sc.nextInt();
            if(val!=-1) {
                temp.left=new Node(val);
                q.add(temp.left);
            }
            val=sc.nextInt();
            if(val!=-1){
                temp.right=new Node(val);
                q.add(temp.right);
            }
            count++;
        }
        System.out.println("height is:"+height(head));
        System.out.println("sum is:"+sumofleafnodes(head));
        leveloreder(head);
    }
}
import java.util.*;
//converting BST to linked list in sorted order
class Lnode {
    int data;
    Lnode next;
    Lnode right;
    Lnode left;

    Lnode(int data) {
        this.data = data;
        this.next = null;
        this.right=null;
        this.left=null;
    }
}

class Main {
    public void print(int k1,int k2){
        root=print(root,k1,k2);
    }
    private Lnode print(Lnode root,int k1,int k2){
        if(root==null){
            return null;
        }
        if(root.data>k1) {
            print(root.left, k1, k2);
        }
        if(root.data>=k1&&root.data<=k2){
            System.out.print(root.data+" ");
        }
        if(root.data<k2){
            print(root.right,k1,k2);
        }
        return root;
    }
    static boolean checkbst(Lnode root,int min,int max){
        if(root==null){
            return true;
        }
        if(root.data<=min&&root.data>=max)
            return false;
        return checkbst(root.left,min,root.data)&&checkbst(root.right,root.data,max);
    }
    public static Lnode insertatend(Lnode head, int data) {
        Lnode newnode = new Lnode(data);
        if (head == null) {
            head = newnode;
        } else {
            Lnode temp = head;
            while (temp.next != null) {
                temp = temp.next;
            }
            temp.next = newnode;
        }
        return head;
    }

    public static Lnode inorder(Lnode head, Lnode root) {
        if (root == null) return head;
        head = inorder(head, root.left);
        head = insertatend(head, root.data);
        head = inorder(head, root.right);
        return head;
    }

    public static void display(Lnode head) {
        Lnode temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        System.out.println("Name : Vasamsetti Sai Subhash\nRollno : 21BF1A3759");
        Lnode root = new Lnode(4);
        root.left = new Lnode(2);
        root.right = new Lnode(6);
        root.left.left = new Lnode(1);
        root.left.right = new Lnode(3);
        root.right.left = new Lnode(5);
        root.right.right = new Lnode(7);

        Lnode head = null;
        head = inorder(head, root);
        display(head);
        int min=Integer.MIN_VALUE;
        int max=Integer.MAX_VALUE;
        System.out.print(checkbst(root,min,max));
    }
}

//NODE SIBLINGS
import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int d) {
        data = d;
        left = right = null;
    }
}

public class BT {
    static Node head;
    static void createBinaryTree(Scanner sc) {
        System.out.println("Enter the root node value: ");
        int val = sc.nextInt();
        if (val == -1)
            return
                    head = new Node(val);
        Queue<Node> q = new LinkedList<>();
        q.add(head);
        while (!q.isEmpty()) {
            Node temp = q.poll();
            val = sc.nextInt();
            if (val != -1) {
                temp.left = new Node(val);
                q.add(temp.left);
            }
            val = sc.nextInt();
            if (val != -1) {
                temp.right = new Node(val);
                q.add(temp.right);
            }
        }
    }
    static void printNodesWithoutSiblings(Node node){
        if (node == null) {
            return;
        }
        if (node.left != null && node.right == null) {
            System.out.println(node.left.data);
        } else if (node.right != null && node.left == null) {
            System.out.println(node.right.data);
        }
        printNodesWithoutSiblings(node.left);
        printNodesWithoutSiblings(node.right);
    }
    public static void main(String[] args) {
        System.out.println("Name:Vasamsetti Sai Subhash\nRollno:21BF1A3759");
        Scanner sc = new Scanner(System.in);
        createBinaryTree(sc);
        System.out.println("Nodes without siblings:");
        printNodesWithoutSiblings(head);
        sc.close();
    }
}

//Diameter of BST
import java.util.LinkedList;
import java.util.Queue;

public class BinarySearchTree {
    int data;
    BinarySearchTree left;
    BinarySearchTree right;

    BinarySearchTree(int d){
        data=d;
        left=null;
        right=null;
    }
    public static BinarySearchTree insert(BinarySearchTree root,int ele){
        if(root==null){
            BinarySearchTree newnode=new BinarySearchTree(ele);
            return newnode;
        }
        if(root.data>=ele)
            root.left=insert(root.left,ele);
        else{
            root.right=insert(root.right,ele);
        }
        return root;
    }
    static void LevelOrderTraversal(BinarySearchTree temp){
        Queue<BinarySearchTree> q=new LinkedList<>();
        q.add(temp);
        while(!q.isEmpty()){
            BinarySearchTree curr=q.poll();
            System.out.print(curr.data+" ");

            if(curr.left!=null)
                q.add(curr.left);
            if(curr.right!=null)
                q.add(curr.right);
        }
    }
    public static void Inorder(BinarySearchTree temp){
        if(temp==null)
            return;
        Inorder(temp.left);
        System.out.print(temp.data+" ");
        Inorder(temp.right);
    }
    public static void Preorder(BinarySearchTree temp){
        if(temp==null)
            return;
        System.out.print(temp.data+" ");
        Preorder(temp.left);
        Preorder(temp.right);
    }
    public static void Postorder(BinarySearchTree temp){
        if(temp==null)
            return;
        Postorder(temp.left);
        Postorder(temp.right);
        System.out.print(temp.data+" ");
    }
    public static int Height(BinarySearchTree root){
        if(root==null)
            return 0;
        else{
            int rh=Height(root.right);
            int lh=Height(root.left);
            return Math.max(rh,lh)+1;
        }
    }
    public static int diameter(BinarySearchTree n){
        if(n==null)
            return 0;
        int lh=Height(n.left);
        int rh=Height(n.right);
        int dt=lh+rh+1;
        int ld=diameter(n.left);
        int rd=diameter(n.right);
        return Math.max(dt,Math.max(ld,rd));

    }
    public static int sumofleaf(BinarySearchTree root){
        if(root==null){
            return 0;
        }
        else{
            if(root.left==null&&root.right==null){
                return root.data;
            }
            else{
                return sumofleaf(root.left)+sumofleaf(root.right);
            }
        }
    }
    public static void main(String args[]){
        System.out.println("Name:Vasamsetti Sai Subhash\nRollno:21BF1A3759");
        BinarySearchTree root=new BinarySearchTree(7);
        insert(root,18);
        insert(root,45);
        insert(root,1);
        insert(root,17);
        insert(root,333);
        insert(root,69);
        insert(root,16);
        insert(root,41);
        insert(root,77);
        insert(root,3);
        insert(root,8);
        insert(root,25);
        System.out.println("Level order :");
        LevelOrderTraversal(root);
        System.out.println("\nInorder :");
        Inorder(root);
        System.out.println("\nPreorder :");
        Preorder(root);
        System.out.println("\nPostorder :");
        Postorder(root);
        System.out.println();
        System.out.println(Height(root));
        System.out.println(diameter(root));

        System.out.println();
        System.out.println(sumofleaf(root));
    }
}

//GRAPHS

//Graph Adjacency matrix
class Graphadjacencymatrix{
    private int v;
    private int e;
    private int adjmat[][];
    public Graphadjacencymatrix(int nodes){
        v=nodes;
        e=0;
        adjmat=new int[nodes][nodes];
    }
    public void addedge(int x,int y) {
        adjmat[x][y] = 1;
        adjmat[y][x] = 1;
        e++;
    }
    public void printAdjmatrix(){
        System.out.println("Adjecency Matrix:");
        for(int i=0;i<v;i++){
            for(int j=0;j<v;j++){
                System.out.print(adjmat[i][j]+" ");
            }
            System.out.print("\n");
        }
        System.out.print("Graph consists of "+v+" vertices and "+e+" edges");
    }
}
public class Main {

    public static void main(String[] args) {
        System.out.println("Name : Vasamsetti Sai Subhash\nRollno : 21BF1A3759");
        Graphadjacencymatrix graph=new Graphadjacencymatrix(4);
        graph.addedge(0,1);
        graph.addedge(1,2);
        graph.addedge(2,3);
        graph.addedge(3,0);

        graph.printAdjmatrix();
    }
}

//Graph Adjacency List
import java.util.LinkedList;

class Graphadjacencylist{
    private int v;
    private int e;
    private LinkedList<Integer>[] adj;
    public Graphadjacencylist(int nodes){
        v=nodes;
        e=0;
        adj=new LinkedList[nodes];
        for(int i=0;i<nodes;i++){
            adj[i]=new LinkedList<>();
        }
    }
    public void addedge(int x,int y) {
        adj[x].add(y);
        adj[y].add(x);
        e++;
    }
    public void printAdjlist(){
        System.out.println("Adjecency List:");
        for(int i=0;i<v;i++){
            System.out.print(i+"->");
            for(int j:adj[i]){
                System.out.print(adj[j]);
            }
            System.out.print("\n");
        }
    }
}
public class Main {

    public static void main(String[] args) {
        System.out.println("Name : Vasamsetti Sai Subhash\nRollno : 21BF1A3759");
        Graphadjacencylist graph=new Graphadjacencylist(4);
        graph.addedge(0,1);
        graph.addedge(1,2);
        graph.addedge(2,3);
        graph.addedge(3,0);

        graph.printAdjlist();
    }
}
//Graph Adjacency list
import java.util.*;
public class graph_adjacency_List{
    private int v;
    private int e;
    private LinkedList<Integer>[] adj;
    public graph_adjacency_List(int nodes){
        v=nodes;
        e=0;
        adj=new LinkedList[nodes];
        for(int i=0;i<nodes;i++){
            adj[i]=new LinkedList<>();
        }
    }
    public void addedge(int x,int y){
        adj[x].add(y);
        adj[y].add(x);
        e++;
    }
    public void printAdjacencyList(){
        System.out.println("Adjacency List");
        for(int i=0;i<v;i++){
            System.out.print(i+"->");
            for(int j:adj[i]){
                System.out.print(adj[j]+" ");
            }
            System.out.println();
        }
    }
    public static void main(String args[]){
        System.out.println("Name : Vasamsetti Sai Subhash\nRollno : 21BF1A3759");
        graph_adjacency_List graph=new graph_adjacency_List(4);
        graph.addedge(0,1);
        graph.addedge(1,2);
        graph.addedge(2,3);
        graph.addedge(3,0);
        System.out.println("graph consistes of "+graph.v+" vertices and "+graph.e+" edges");
        graph.printAdjacencyList();
    }
}


import java.util.ArrayList;
import java.util.Stack;
import java.util.LinkedList;
import java.util.Queue;

public class GraphTraversal {

    public static void dfs(ArrayList<ArrayList<Integer>> arr, int src, int v) {
        Stack<Integer> st = new Stack<>();
        boolean[] visited = new boolean[v];
        st.push(src);
        visited[src] = true;

        while (!st.empty()) {
            int cur = st.pop();
            System.out.print(cur + " ");

            for (int neighbor : arr.get(cur)) {
                if (!visited[neighbor]) {
                    st.push(neighbor);
                    visited[neighbor] = true;
                }
            }
        }
    }

    public static void bfs(ArrayList<ArrayList<Integer>> arr, int src, int v) {
        Queue<Integer> q = new LinkedList<>();
        boolean[] visited = new boolean[v];
        q.add(src);
        visited[src] = true;

        while (!q.isEmpty()) {
            int cur = q.poll();
            System.out.print(cur + " ");

            for (int neighbor : arr.get(cur)) {
                if (!visited[neighbor]) {
                    q.add(neighbor);
                    visited[neighbor] = true;
                }
            }
        }
    }

    public static void main(String[] args) {
        System.out.println("Name : Vasamsetti Sai Subhash\nRollno : 21BF1A3759");
        int vertices = 5;
        ArrayList<ArrayList<Integer>> adjList = new ArrayList<>(vertices);

        for (int i = 0; i < vertices; i++) {
            adjList.add(new ArrayList<>());
        }

        adjList.get(0).add(1);
        adjList.get(0).add(2);
        adjList.get(1).add(3);
        adjList.get(2).add(4);

        System.out.print("DFS Traversal: ");
        dfs(adjList, 0, vertices);
        System.out.println();

        System.out.print("BFS Traversal: ");
        bfs(adjList, 0, vertices);
        System.out.println();
    }
}

//Primss Algorithm
import java.util.Scanner;

public class prims {
    final static int MAX = 20;
    static int v;
    static int[][] cost;
    static Scanner sc = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("Name : Vasamsetti Sai Subhash\nRollno : 21BF1A3759");
        prims p = new prims();
        p.readMatrix();
        p.primss();
    }

    static void readMatrix() {
        int i, j;
        cost = new int[MAX][MAX];
        System.out.println("Enter the number of vertices:");
        v = sc.nextInt();
        System.out.println("Enter the cost matrix (enter 0 for no connection, else enter the cost):");
        for (i = 0; i < v; i++) {
            for (j = 0; j < v; j++) {
                cost[i][j] = sc.nextInt();
                if (cost[i][j] == 0 && i != j) {
                    cost[i][j] = 999; // Assume 999 as the representation of infinity for no connection
                }
            }
        }
    }

    void primss() {
        int[] visited = new int[MAX];
        int ne = 1, i, j, min, a = 0, b = 0;
        int mincost = 0;
        visited[0] = 1;
        while (ne < v) {
            min = 999;
            for (i = 0; i < v; i++) {
                if (visited[i] == 1) {
                    for (j = 0; j < v; j++) {
                        if (cost[i][j] < min && visited[j] == 0) {
                            min = cost[i][j];
                            a = i;
                            b = j;
                        }
                    }
                }
            }
            if (visited[a] == 1 && visited[b] == 0) {
                System.out.println("Edge " + ne++ + ": (" + (a + 1) + "," + (b + 1) + ") cost: " + min);
                mincost += min;
                visited[b] = 1;
            }
            cost[a][b] = cost[b][a] = 999;
        }
        System.out.println("Minimum cost: " + mincost);
    }
}

//Floyds Algorithm
import java.util.*;
public class Floyd{
    public static void main(String args[]){
        System.out.println("Name:Vasamsetti Sai Subhash\nRollno:21BF1A3759");
        Scanner sc=new Scanner(System.in);
        int v=sc.nextInt();
        int cost[][]=new int[v][v];
        for(int i=0;i<v;i++){
            for(int j=0;j<v;j++){
                cost[i][j]=sc.nextInt();
            }
        }
        for(int k=0;k<v;k++){
            for(int i=0;i<v;i++){
                for(int j=0;j<v;j++){
                    if(cost[i][k]!=Integer.MAX_VALUE&&cost[k][j]!=Integer.MAX_VALUE)
                        cost[i][j]=Math.min(cost[i][j],cost[i][k]+cost[k][j]);
                }
            }
        }
        for(int i=0;i<v;i++){
            if(cost[i][i]<0){
                System.out.println("Negative cycle detected");
                return;
            }
        }
        for(int i=0;i<v;i++){
            for(int j=0;j<v;j++){
                if(cost[i][j]==Integer.MAX_VALUE){
                    System.out.print("INF");
                }
                else{
                    System.out.print(cost[i][j]+" ");
                }
            }
            System.out.println();
        }
    }
}
